package com.example.demo.controller;

import com.example.demo.exception.ErrorResponse;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Product;
import com.example.demo.service.ProductsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;

@RestController
public class MainController {
    @Autowired
    private ProductsService productsService;

    @GetMapping("/products")
    public List<Product> products(@RequestParam(value = "id", defaultValue = "-1") int id) throws ResourceNotFoundException {
//        when no id provided then list all the products
        if (id == -1) {
            return productsService.getAllProducts();
        }
//        list the required product if present else say not present
        else {
            //: on returning null, return exception and in it say product not present

//            List<Products> lst = productsService.getAllProducts(id)
            return Collections.singletonList(productsService.getProductById(id));
        }
    }

    //    receive a json data object and return the list as POJO.
//    : make it accept more than one product at a time. See the format for it.
    @PostMapping(value = "/add", consumes = {MediaType.APPLICATION_JSON_VALUE})
    public List<Product> addProducts(@RequestBody List<Product> prodObj) {
//        return productsService.saveProduct(prodObj);
        return productsService.saveAllProducts(prodObj);
    }

    //    : find by id, change whatever info given in body and keep the rest as same
    @PutMapping(value = "/update/{id}", consumes = {MediaType.APPLICATION_JSON_VALUE})
    public List<Product> updateProducts(@RequestBody Product products, @PathVariable int id) throws ResourceNotFoundException {

        Product pr = new Product();
        pr.setId(products.getId());
        pr.setName(products.getName());
        pr.setDescription(products.getDescription());
        pr.setPrice(products.getPrice());
        pr.setQuantity(products.getQuantity());

        productsService.saveProduct(pr);

        return productsService.getAllProducts();
    }

    @DeleteMapping("/delete")
    public List<Product> deleteProduct(@RequestParam(value = "id") int id) throws ResourceNotFoundException {
//: say custom error if product not found using custom exception
        return productsService.deleteProduct(id);
    }

//    REVIEW COMMENTS
//    TODO: change from conflict to generic exception. use apt https status codes
//    TODO: use responseEntity for returning response and errors.
//    TODO: refactor the model(change name) and controller(move update code to service)
//    TODO: creating a new errorHandler that should handle every specifc and other unavoidable errors in that class
//    TODO: on adding, return only added json with code 201.
//    TODO: different handlers for adding, adding all;
//    TODO: change from requestParam to pathVariable.
//    TODO: make id autogenerated. make it String for UUID.
//    TODO: add contextual path through properties, such as /api/products/view etc
//

//    NEW TASKS
//    TODO: data validation of json responses(can be done using annotation)->handle annotation failure error.
//    TODO: Logging/logs concepts.

//    TODO: add /search based on name, desc
//    TODO: JUnit testcases



    @ExceptionHandler(value = ResourceNotFoundException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ErrorResponse handleRNFException(ResourceNotFoundException ex) {
        return new ErrorResponse(HttpStatus.CONFLICT.value(), ex.getMessage());
    }
}
