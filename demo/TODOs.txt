//    REVIEW COMMENTS
//    : change from conflict to generic exception. use apt https status codes
//    : use responseEntity for returning response and errors.
//    : refactor the model(change name) and controller(move update code to service)
//    : creating a new errorHandler that should handle every specific and other unavoidable errors in that class
//    : on adding, return only added json with code 201.
//    : different handlers for adding, adding all;
//    : change from requestParam to pathVariable.
//    : make id autogenerated. make it String for UUID. <-then cant use built-in methods like findbyid etc
//    : add contextual path through properties, such as /api/products/view etc
//

//    NEW TASKS
//    : data validation of json responses(can be done using annotation)
//    : ->handle annotation failure error.
//    : Logging/logs concepts.

//    : add /search based on name, desc
//    : JUnit testcases

//    26/9/23 comments
//    : use annotation for date created and modified. dont do it manually
//    : instead of service, make controller return response entity. service returns only data.
//    : for show products also, use path variable. use request param for only searching etc.
//    : able to add null values. change that. Validation, NotNull, etc.
}

//  27/09/23
// :  learn-> spring active profiles
//  : learn-> queueing mechanism-rabitMQ, r kafka. <- decoupling, data reliablity.
//  : use command line arguments <- spring boot <- connection done but data not accessible
//  : add a list of strings and try to validate if each value is not empty.
//  : on updating a product, createdAt becoming null. Fix it.
//  : on validating, id required so skip its validation.

// 28/09/2023
//  : createdAt shud be non editable <- annotation
// : data validation of fields.
//  : for valdation failure, return a json response of errors. bind all the errors together and print
//  : more detailed flow of logs. more coverage in exceptions.

//29/9/2023
//: add validation for addAll, update(manually), for list of products
//: apt logging. more detailed.
//: test cases(2-contr, all-service, all-util), follow name stds, test case stds, package struct, successTestCases, failureTestCases.
//: resolve sonarLint issues
//: have DTO apart from DAO. use annotations in DTO.
//: delete unused classes after checking.

//WEEK 2 TASKS
//: {Add bulk creation feature for products -
//      create a route which accepts list of products in a form of CSV file and add it to DB after validation.
//      ->/bulkImport
//      ->take in a csv file only. If other filetype then throw error.
//      ->A csv file will have head as column names, and each row as data.
//      ->Object mapper will check the data type of each cell while converting to json
//      ->After that validate data such name not empty, price not negative.
//      ->finally, using /addAll, save to database. Actually the saveAll method too ,checks for validations }
//: {Add export feature for product detail -
//      add a route which accepts a file format (CSV, PDF, JSON & XML), and downloads an export file of all the products in the requested format.
//      ->/bulkExport?fileType=given
//      ->write logic for in this order csv->json->pdf->xml
//      ->mappers are there for all types. Jackson libs probably.
//      ->If product list empty then dont create file. Just print as no product in list.
//      ->filename-export-timestamp. filename should come from application.properties config.}

03/10/2023 COMMENTS
: util class in a util package?? for what but??
: ->common logics throughout the project,
: in each method, check the incoming data.
: coding standards.
: return the file to be downloaded. Delete from local storage.
: move csv and xml methods to util. make them dynamic using List<String[]> and List<Object>
 :reconfigure pdf export function

TODO: learn-> authentication-authorization, JWT, SQL, spring security, spring filters.
TODO: learn-> containerize the application

:PERSISTING ISSUES-
: export csv working but image field is faulty. writing only one value. <- BECAUSE ',' IS THE DELIMITER.
: file eiter not getting created neither deleted
: transfer of methods such as of exportcsv and export xml to util classes.
: '[' and ']' in exported files. wtf.
use DAO only while fetching/saving from/to db directly, i.e. the repository methods. in all the other places of data flow, dto only should be used.
all the data validation must be in DTO. DAO should only have annotations for field type, such as @ID, @CREATED etc.


:create all the reusable constants such as "json"
:correct error messages, throw in import and export. logging for devs, throwing errors for client.
:handle error messages.
:use CollectionUtils, StringUtils, Objects for checking
:refactor all the export methods. try max reusability, fewer codes.
:JUNIT TEST CASES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
: learn->java streams, lambda functions in java, method reference.<- for faster code execution!
: different classes for exporting and importing functionality.
:DEADLINE-SUNDAY!